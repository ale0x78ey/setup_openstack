openstack_release: "{{ kolla_openstack_release }}"
openstack_tag: "{{ kolla_options[kolla_openstack_release].openstack_tag }}"

################
# Kolla options
################

# Possible values:
# - COPY_ONCE
# - COPY_ALWAYS
config_strategy: "COPY_ALWAYS"

# Possible values:
# - centos
# - debian
# - ubuntu
# - rhel
kolla_base_distro: "{{ kolla_base_distro }}"

# Possible values:
# - binary
# - source
kolla_install_type: "{{ kolla_install_type }}"

# If TLS is enabled only on the internal or external
# network, then kolla_internal_vip_address and kolla_external_vip_address
# must be different.

# This should be a VIP, an unused IP on your network that will float between
# the hosts running keepalived for high-availability. If you want to run an
# All-In-One without haproxy and keepalived, you can set enable_haproxy to no
# in "OpenStack options" section, and set this value to the IP of your
# 'network_interface' as set in the Networking section below.
kolla_internal_vip_address: "{{ project_options[openstack_host].kolla_internal_vip_address }}"

# This should be a VIP, an unused IP on your network that will float between
# the hosts running keepalived for high-availability. It defaults to the
# kolla_internal_vip_address, allowing internal and external communication to
# share the same address.  Specify a kolla_external_vip_address to separate
# internal and external requests between two VIPs.
kolla_external_vip_address: "{{ project_options[openstack_host].kolla_external_vip_address }}"

node_config: /etc/kolla
node_custom_config: "{{ '{{ node_config }}' }}/config"

#################
# Docker options
#################

# Custom docker registry settings:
docker_registry: "{{ docker_registry }}"
docker_registry_insecure: "yes"

docker_namespace: "{{ kolla_docker_namespace }}"

{% if setup_tls | d("no") == "yes" %}

##############
# TLS options
##############

kolla_certificates_dir: "{{ '{{ node_config }}' }}/certificates"

# To enable TLS for the back-end communication [victoria].
kolla_enable_tls_backend: "yes"

# If there is only a single network configured in your topology (as opposed
# to separate internal and external networks), TLS can only be enabled
# using the internal network configuration variables.
kolla_enable_tls_external: "no"
kolla_enable_tls_internal: "yes"

# To copy CA certificate files to the service containers.
kolla_copy_ca_into_containers: "yes"

kolla_external_fqdn_cert: "{{ '{{ kolla_certificates_dir }}' }}/haproxy.pem"
kolla_internal_fqdn_cert: "{{ '{{ kolla_certificates_dir }}' }}/haproxy-internal.pem"
kolla_external_fqdn_cacert: "{{ '{{ kolla_certificates_dir }}' }}/haproxy-ca.pem"
kolla_internal_fqdn_cacert: "{{ '{{ kolla_certificates_dir }}' }}/haproxy-ca-internal.pem"

haproxy_backend_cacert_dir: "/etc/ssl/certs"
haproxy_backend_cacert: ca-certificates.crt
openstack_cacert: /etc/ssl/certs/ca-certificates.crt
{% endif %}

###############################
# Neutron - Networking Options
###############################

# This interface is what all your api services will be bound to by default.
# Additionally, all vxlan/tunnel and storage network traffic will go over this
# interface by default. This interface must contain an IP address.
# It is possible for hosts to have non-matching names of interfaces - these can
# be set in an inventory file per host or per group or stored separately, see
#     http://docs.ansible.com/ansible/intro_inventory.html
# Yet another way to workaround the naming problem is to create a bond for the
# interface on all hosts and give the bond name here. Similar strategy can be
# followed for other types of interfaces.
network_interface: "{{ kolla_network_interface }}"

# This is the raw interface given to neutron as its external network port. Even
# though an IP address can exist on this interface, it will be unusable in most
# configurations. It is recommended this interface not be configured with any IP
# addresses for that reason.
neutron_external_interface: "{{ kolla_neutron_external_interface }}"

enable_openvswitch: "yes"

# Possible values:
# - openvswitch
# - ovn
# - linuxbridge
# - vmware_nsxv
# - vmware_nsxv3
# - vmware_dvs
# if vmware_nsxv3 is selected, enable_openvswitch MUST be set to "no" (default is yes)
neutron_plugin_agent: "openvswitch"

# Possible values:
# - internal
# - infoblox
neutron_ipam_driver: "internal"

# Configure Neutron upgrade option, currently Kolla support
# two upgrade ways for Neutron: legacy_upgrade and rolling_upgrade
# The variable "neutron_enable_rolling_upgrade: yes" is meaning rolling_upgrade
# were enabled and opposite
# Neutron rolling upgrade were enable by default
neutron_enable_rolling_upgrade: "yes"

# Provider networks allow to connect compute instances directly to
# physical networks avoiding tunnels. This is necessary for example for
# some performance critical applications. Only administrators of OpenStack
# can create such networks.
#
# For provider networks compute hosts must have external bridge created
# and configured by Ansible tasks like it is already done for tenant DVR
# mode networking. Normal tenant non-DVR networking does not need external
# bridge on compute hosts and therefore operators donâ€™t need additional
# dedicated network interface.
enable_neutron_provider_networks: "yes"

#################
# Region options
#################

# Use this option to change the name of this region.
openstack_region_name: "HOME-1"

####################
# OpenStack options
####################

# Possible values:
# - True
# - False
openstack_logging_debug: "False"

# Enable core OpenStack services. This includes:
# glance, keystone, neutron, nova, heat, and horizon.
enable_openstack_core: "yes"

enable_karbor: "yes"
enable_horizon_karbor: "no"

enable_cinder: "yes"
enable_cinder_backup: "yes"

enable_octavia: "yes"

##################
# Octavia options
##################

# If using a VLAN for the Octavia management network, enable Neutron provider
# networks (see enable_neutron_provider_networks).

########################
# External Ceph options
########################

# External Ceph - cephx auth enabled (this is the standard nowadays, defaults to yes)
external_ceph_cephx_enabled: "yes"

# Glance
ceph_glance_keyring: "ceph.client.glance.keyring"
ceph_glance_user: "glance"
ceph_glance_pool_name: "images"

# Cinder
ceph_cinder_keyring: "ceph.client.cinder.keyring"
ceph_cinder_user: "cinder"
ceph_cinder_pool_name: "volumes"

ceph_cinder_backup_keyring: "ceph.client.cinder-backup.keyring"
ceph_cinder_backup_user: "cinder-backup"
ceph_cinder_backup_pool_name: "backups"

# Nova
ceph_nova_keyring: "ceph.client.cinder.keyring"
ceph_nova_user: "cinder"
ceph_nova_pool_name: "vms"

##############################
# Keystone - Identity Options
##############################

keystone_admin_user: "admin"
keystone_admin_project: "admin"

#########################
# Glance - Image Options
#########################

# Configure image backend.
glance_backend_ceph: "yes"
glance_backend_file: "no"

#################################
# Cinder - Block Storage Options
#################################

# Enable / disable Cinder backends
cinder_backend_ceph: "yes"

# Possible values:
# - nfs
# - swift
# - ceph
cinder_backup_driver: "ceph"

#########################
# Nova - Compute Options
#########################

nova_backend_ceph: "yes"

# Possible values:
# - qemu
# - kvm
# - vmware
nova_compute_virt_type: "kvm"

# Possible values:
# - none
# - novnc
# - spice
nova_console: "novnc"
